apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8scrud
  namespace: default
  labels:
    app.kubernetes.io/name: k8scrud
    app.kubernetes.io/instance: k8scrud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8scrud
  namespace: default
  labels:
    app.kubernetes.io/name: k8scrud
    app.kubernetes.io/instance: k8scrud
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8scrud
  namespace: default
  labels:
    app.kubernetes.io/name: k8scrud
    app.kubernetes.io/instance: k8scrud
subjects:
  - kind: ServiceAccount
    name: k8scrud
roleRef:
  kind: Role
  name: k8scrud
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: k8scrud
    app.kubernetes.io/instance: k8scrud
  name: k8scrud
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8scrud
  strategy: {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k8scrud
        app.kubernetes.io/instance: k8scrud
    spec:
      serviceAccountName: k8scrud
      initContainers:
        - image: fritzduchardt/nginx-environment-configurator:latest
          name: nginx-environment-configurator
          volumeMounts:
            - name: nginx-conf
              mountPath: "/work-dir"
          env:
            - name: NGINX_CONFIG_PATH
              value: "/work-dir/default.conf"
            - name: LOCATION_1
              value: "/"
            - name: PROXYPATH_1
              value: "http://localhost:8080/"
            - name: LOCATION_2
              value: "/swagger"
            - name: PROXYPATH_2
              value: "http://localhost:8081/"
      containers:
        - image: fritzduchardt/k8scrud:latest
          imagePullPolicy: Always
          name: k8scrud
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: 9090
          readinessProbe:
            httpGet:
              path: /health
              port: 9090
          env:
            - name: server.port
              value: "8081"
            - name: SPRING_PROFILES_ACTIVE
              value: production
        - image: swaggerapi/swagger-ui:latest
          imagePullPolicy: IfNotPresent
          name: swaggerapi
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          env:
            - name: PORT
              value: "8081"
            - name: SWAGGER_JSON_URL
              value: http://localhost:8080/v2/api-docs
        - image: nginx:latest
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/
              name: nginx-conf
      volumes:
        - name: nginx-conf
          emptyDir: {}
        - name: k8scrud-manifests
          persistentVolumeClaim:
            claimName: k8scrud
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: k8scrud
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k8scrud
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1078Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /prometheus
    prometheus.io/port: "9090"
  labels:
    app.kubernetes.io/name: k8scrud
    app.kubernetes.io/instance: k8scrud
  name: k8scrud
  namespace: default
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 80
  selector:
    app.kubernetes.io/name: k8scrud
  type: ClusterIP

